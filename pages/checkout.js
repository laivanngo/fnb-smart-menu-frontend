// T·ªáp: pages/checkout.js (HO√ÄN CH·ªàNH - S·ª≠a Hydration & ClearCart & Voucher)
// M·ª•c ƒë√≠ch: Trang Thanh to√°n, thu th·∫≠p th√¥ng tin v√† ƒê·∫∑t h√†ng

import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import { useCart } from '../context/CartContext'; // L·∫•y "c√°i m√≥c" c·ªßa "Chi·∫øc t√∫i"
import { useRouter } from 'next/router';

export default function CheckoutPage() {
    const router = useRouter();
    // 1. L·∫•y gi·ªè h√†ng V√Ä h√†m "X√≥a s·∫°ch" t·ª´ "Chi·∫øc t√∫i"
    const { cartItems, totalPrice, itemCount, clearCart } = useCart();

    // 2. "B·ªô nh·ªõ" (State) cho c√°c bi·ªÉu m·∫´u (form)
    const [customerInfo, setCustomerInfo] = useState({ name: '', phone: '', address: '', note: '' });
    const [deliveryMethod, setDeliveryMethod] = useState('TIEU_CHUAN');
    const [paymentMethod, setPaymentMethod] = useState('TIEN_MAT');
    const [voucherCode, setVoucherCode] = useState(''); // State cho m√£ voucher

    // States cho logic
    const [calculation, setCalculation] = useState(null); // K·∫øt qu·∫£ t√≠nh to√°n t·ª´ backend
    const [error, setError] = useState('');
    const [isLoading, setIsLoading] = useState(false); // Loading khi ƒë·∫∑t h√†ng
    const [isCalculating, setIsCalculating] = useState(false); // Loading khi t√≠nh to√°n

    // === 3. PH·∫¶N S·ª¨A L·ªñI HYDRATION ===
    const [hasMounted, setHasMounted] = useState(false);
    useEffect(() => {
        setHasMounted(true); // ƒê√°nh d·∫•u l√† ƒë√£ ch·∫°y tr√™n client
    }, []);
    // === K·∫æT TH√öC S·ª¨A L·ªñI ===

    // 4. H√†m x·ª≠ l√Ω khi g√µ v√†o √¥ th√¥ng tin
    const handleInfoChange = (e) => {
        setCustomerInfo({ ...customerInfo, [e.target.name]: e.target.value });
    };

    // 5. H√ÄM CH·ªêT GI√Å (G·ªçi API /orders/calculate)
    const fetchCalculation = async (currentVoucherCode) => {
        // Ch·ªâ t√≠nh khi ƒë√£ mount v√† c√≥ h√†ng
        if (!hasMounted || cartItems.length === 0) {
             setCalculation({ sub_total: 0, delivery_fee: 0, discount_amount: 0, total_amount: 0 });
            return;
        }

        setIsCalculating(true); // B·∫Øt ƒë·∫ßu loading t√≠nh to√°n
        setError(''); // X√≥a l·ªói c≈©

        const itemsPayload = cartItems.map(item => ({
            product_id: item.product_id, quantity: item.quantity, options: item.options,
        }));

        try {
            const res = await fetch('http://127.0.0.1:8000/orders/calculate', {
                method: 'POST', headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    items: itemsPayload,
                    voucher_code: currentVoucherCode || null, // S·ª≠ d·ª•ng voucher code ƒë∆∞·ª£c truy·ªÅn v√†o
                    delivery_method: deliveryMethod,
                }),
            });
            // N√©m l·ªói n·∫øu backend tr·∫£ v·ªÅ l·ªói (vd: voucher kh√¥ng h·ª£p l·ªá)
            if (!res.ok) {
                const errData = await res.json();
                throw new Error(errData.detail || 'Kh√¥ng th·ªÉ t√≠nh to√°n ƒë∆°n h√†ng');
            }
            const data = await res.json();
            setCalculation(data);
        } catch (err) {
            setError(err.message);
            setCalculation(null); // Reset calculation n·∫øu c√≥ l·ªói
        } finally {
            setIsCalculating(false); // K·∫øt th√∫c loading t√≠nh to√°n
        }
    };

    // 6. T·ª± ƒë·ªông "Ch·ªët gi√°" (Ch·ªâ ch·∫°y sau khi "hasMounted")
    // Ch·∫°y khi mount, ƒë·ªïi deliveryMethod, ho·∫∑c cartItems thay ƒë·ªïi
    useEffect(() => {
        // Ch·ªâ ch·∫°y c√°c logic n√†y sau khi "client" ƒë√£ "mounted"
        if (hasMounted) {
            // N·∫øu gi·ªè r·ªóng, ƒë·∫©y v·ªÅ trang ch·ªß
            // D√πng router.isReady ƒë·ªÉ ch·∫Øc ch·∫Øn router ƒë√£ s·∫µn s√†ng tr∆∞·ªõc khi ki·ªÉm tra pathname
            if (router.isReady && itemCount === 0 && router.pathname === '/checkout') {
                router.replace('/'); // D√πng replace ƒë·ªÉ kh√¥ng l∆∞u v√†o l·ªãch s·ª≠
            } else if (itemCount > 0) { // Ch·ªâ t√≠nh to√°n n·∫øu c√≥ h√†ng
                fetchCalculation(voucherCode); // G·ªçi t√≠nh to√°n v·ªõi voucher hi·ªán t·∫°i
            } else if (itemCount === 0) { // Set calculation v·ªÅ 0 n·∫øu gi·ªè tr·ªëng
                setCalculation({ sub_total: 0, delivery_fee: 0, discount_amount: 0, total_amount: 0 });
            }
        }
    }, [hasMounted, deliveryMethod, cartItems, itemCount, router.isReady, router.pathname]); // Th√™m router.isReady v√† pathname


    // --- H√†m x·ª≠ l√Ω khi b·∫•m n√∫t "√Åp d·ª•ng" Voucher ---
    const handleApplyVoucher = () => {
        // Ch·ªâ c·∫ßn g·ªçi l·∫°i fetchCalculation v·ªõi voucherCode hi·ªán t·∫°i trong state
        fetchCalculation(voucherCode);
    };


    // 7. H√ÄM ƒê·∫∂T H√ÄNG (G·ªçi API /orders)
    const handlePlaceOrder = async (e) => {
        e.preventDefault();
        if (!customerInfo.name || !customerInfo.phone || !customerInfo.address) { setError('Vui l√≤ng nh·∫≠p ƒë·ªß H·ªç t√™n, SƒêT v√† ƒê·ªãa ch·ªâ'); return; }
        if (itemCount === 0) { setError('Gi·ªè h√†ng tr·ªëng!'); return; }
        if (!calculation && !isCalculating) { setError('ƒêang ch·ªù t√≠nh to√°n, vui l√≤ng th·ª≠ l·∫°i sau gi√¢y l√°t.'); fetchCalculation(voucherCode); return; }
        if (!calculation && isCalculating) { setError('ƒêang t√≠nh to√°n, vui l√≤ng ch·ªù...'); return; }

        setIsLoading(true); setError('');

        const orderPayload = {
            items: cartItems.map(item => ({ product_id: item.product_id, quantity: item.quantity, options: item.options, note: item.note })),
            voucher_code: calculation?.discount_amount > 0 ? voucherCode : null,
            delivery_method: deliveryMethod,
            customer_name: customerInfo.name, customer_phone: customerInfo.phone, customer_address: customerInfo.address, customer_note: customerInfo.note,
            payment_method: paymentMethod,
        };

        try {
            const res = await fetch('http://127.0.0.1:8000/orders', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(orderPayload), });
            if (!res.ok) { const errData = await res.json(); throw new Error(errData.detail || 'ƒê·∫∑t h√†ng th·∫•t b·∫°i'); }

            const orderResult = await res.json();
            alert(`ƒê·∫∑t h√†ng th√†nh c√¥ng! M√£ ƒë∆°n h√†ng c·ªßa b·∫°n l√† #${orderResult.id}`);
            clearCart();
            router.push('/');
        } catch (err) { setError(err.message); }
        finally { setIsLoading(false); }
    };

    // 8. "C·ªîNG AN NINH" - Ch·ªëng l·ªói Hydration
    // Hi·ªÉn th·ªã loading cho ƒë·∫øn khi client mount xong
    if (!hasMounted) {
        return (
            <div className="container" style={{textAlign: 'center', paddingTop: '50px'}}>
                <Head><title>Thanh to√°n</title></Head>
                <p>ƒêang t·∫£i gi·ªè h√†ng...</p>
            </div>
        );
    }

    // 9. Giao di·ªán (HTML/JSX) - Ch·ªâ render khi hasMounted = true
    return (
        <div className="container checkout-page">
            <Head><title>Thanh to√°n</title></Head>
            <header className="header">üõí Thanh to√°n</header>

            <form onSubmit={handlePlaceOrder}>
                {/* --- C·ªôt Th√¥ng tin --- */}
                <div className="checkout-form">
                     <h3>Th√¥ng tin Giao h√†ng</h3>
                    <input name="name" placeholder="H·ªç v√† T√™n" onChange={handleInfoChange} required />
                    <input name="phone" placeholder="S·ªë ƒëi·ªán tho·∫°i" onChange={handleInfoChange} required />
                    <input name="address" placeholder="ƒê·ªãa ch·ªâ" onChange={handleInfoChange} required />
                    <textarea name="note" placeholder="Ghi ch√∫ th√™m (n·∫øu c√≥)" onChange={handleInfoChange} />

                    <h3>Ph∆∞∆°ng th·ª©c Giao h√†ng</h3>
                    <div className="option-group-checkout">
                        <label> <input type="radio" name="delivery" value="TIEU_CHUAN" checked={deliveryMethod === 'TIEU_CHUAN'} onChange={(e) => setDeliveryMethod(e.target.value)} /> Giao Ti√™u chu·∫©n (20-30 ph√∫t) </label>
                        <label> <input type="radio" name="delivery" value="NHANH" checked={deliveryMethod === 'NHANH'} onChange={(e) => setDeliveryMethod(e.target.value)} /> Giao Nhanh (10-15 ph√∫t) </label>
                    </div>

                    <h3>Ph∆∞∆°ng th·ª©c Thanh to√°n</h3>
                    <div className="option-group-checkout">
                        <label> <input type="radio" name="payment" value="TIEN_MAT" checked={paymentMethod === 'TIEN_MAT'} onChange={(e) => setPaymentMethod(e.target.value)} /> üíµ Ti·ªÅn m·∫∑t </label>
                        <label> <input type="radio" name="payment" value="MOMO" checked={paymentMethod === 'MOMO'} onChange={(e) => setPaymentMethod(e.target.value)} /> üì± MoMo </label>
                    </div>
                </div>

                {/* --- C·ªôt ƒê∆°n h√†ng & T·ªïng ti·ªÅn --- */}
                <div className="checkout-summary">
                    {/* Hi·ªÉn th·ªã itemCount an to√†n v√¨ ƒë√£ qua c·ªïng hasMounted */}
                    <h3>ƒê∆°n h√†ng c·ªßa b·∫°n ({itemCount})</h3>

                    <div className="cart-items-list-checkout">
                        {cartItems.map(item => (
                            <div key={item.cartId} className="cart-item-checkout">
                                <span className="item-qty">{item.quantity}x</span>
                                <div className="item-details">
                                    <strong>{item._display.name}</strong>
                                    <small>{item._display.optionsText}</small>
                                </div>
                                <span className="item-price"> {(item._display.itemPrice * item.quantity).toLocaleString('vi-VN')}ƒë </span>
                            </div>
                        ))}
                    </div>

                    {/* --- √î Voucher --- */}
                    <div className="voucher-input-group">
                        <input type="text" placeholder="Nh·∫≠p m√£ gi·∫£m gi√° (n·∫øu c√≥)" value={voucherCode} onChange={(e) => setVoucherCode(e.target.value.toUpperCase())} style={styles.voucherInput} />
                        <button type="button" onClick={handleApplyVoucher} style={styles.applyButton} disabled={isCalculating}> √Åp d·ª•ng </button>
                    </div>

                    {/* --- Ph·∫ßn T·ªïng ti·ªÅn --- */}
                    <div className="checkout-total">
                        {isCalculating ? ( <p style={{textAlign: 'center', color: '#555'}}>ƒêang t√≠nh to√°n...</p> )
                         : calculation ? (
                            <>
                                <div className="total-row"><span>T·∫°m t√≠nh:</span><span>{calculation.sub_total.toLocaleString('vi-VN')}ƒë</span></div>
                                <div className="total-row"><span>Ph√≠ giao h√†ng:</span><span>{calculation.delivery_fee > 0 ? calculation.delivery_fee.toLocaleString('vi-VN')+'ƒë' : 'Mi·ªÖn ph√≠'}</span></div>
                                {calculation.discount_amount > 0 && ( <div className="total-row discount"><span>Gi·∫£m gi√° ({voucherCode}):</span><span>-{calculation.discount_amount.toLocaleString('vi-VN')}ƒë</span></div> )}
                                <div className="total-row final"><span>T·ªïng c·ªông:</span><span>{calculation.total_amount.toLocaleString('vi-VN')}ƒë</span></div>
                            </>
                         ) : ( error ? null : <p style={{textAlign: 'center', color: '#888'}}>Vui l√≤ng ch·ªçn P.th·ª©c giao h√†ng</p> )} {/* Ch·ªâ hi·ªán n·∫øu ch∆∞a t√≠nh v√† kh√¥ng c√≥ l·ªói */}
                    </div>

                    {error && <p className="error-message">{error}</p>}

                    <button type="submit" className="place-order-btn" disabled={isLoading || isCalculating || !calculation || itemCount === 0}> {/* Th√™m disable n·∫øu gi·ªè r·ªóng */}
                        {isLoading ? 'ƒêang x·ª≠ l√Ω...' : 'üì¶ ƒê·∫∂T H√ÄNG'}
                    </button>
                </div>
            </form>
        </div>
    );
}

// --- CSS n·ªôi b·ªô ---
const styles = {
    voucherInput: { flexGrow: 1, padding: '10px', border: '1px solid #ddd', borderRadius: '4px 0 0 4px', fontSize: '0.9rem' },
    applyButton: { padding: '10px 15px', border: '1px solid #ddd', borderLeft: 'none', background: '#eee', borderRadius: '0 4px 4px 0', cursor: 'pointer', fontSize: '0.9rem' }
};