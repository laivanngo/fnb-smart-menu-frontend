// T·ªáp: fnb-smart-menu-frontend/pages/index.js (N√¢ng c·∫•p "Hi·ªÉn th·ªã ·∫¢nh th·∫≠t")

import Head from 'next/head';
import { useState } from 'react';
import ProductModal from '../components/ProductModal';
import CartDisplay from '../components/CartDisplay';

// L·∫•y ƒë·ªãa ch·ªâ API public (d√πng cho ·∫£nh)
const publicApiUrl = process.env.NEXT_PUBLIC_API_URL;

// --- PH·∫¶N 1: Giao di·ªán (HTML/JSX) ---
export default function HomePage({ menuData, error }) {
  
  const [selectedProduct, setSelectedProduct] = useState(null);

  if (error) {
    return (
      <div className="container" style={{ color: 'red', textAlign: 'center', padding: '50px' }}>
        <h1>L·ªói khi t·∫£i Menu</h1>
        <p>{error}</p>
        <p>Vui l√≤ng ƒë·∫£m b·∫£o "B·ªô n√£o" (Backend) ƒëang ch·∫°y v√† "M·∫∑t ti·ªÅn" (Frontend) ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh API URL ch√≠nh x√°c.</p>
        <p>N·∫øu b·∫°n ƒëang ch·∫°y local, h√£y ƒë·∫£m b·∫£o file .env.local c√≥ `NEXT_PUBLIC_API_URL=http://127.0.0.1:8000`</p>
      </div>
    );
  }

  // === H√ÄM M·ªöI: Quy·∫øt ƒë·ªãnh URL ·∫£nh ===
  const getImageUrl = (imageUrl) => {
    if (!imageUrl) return null; // Kh√¥ng c√≥ ·∫£nh
    // N·∫øu l√† link ngo√†i (vd: http...) ho·∫∑c emoji (kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng /)
    if (imageUrl.startsWith('http') || !imageUrl.startsWith('/')) {
        return imageUrl; // D√πng ch√≠nh n√≥
    }
    // N·∫øu l√† ƒë∆∞·ªùng d·∫´n /static/...
    // (publicApiUrl ƒë√£ c√≥ http://... ·ªü ƒë·∫ßu)
    return `${publicApiUrl}${imageUrl}`; // N·ªëi v·ªõi API URL c√¥ng khai
  };
  
  // === H√ÄM M·ªöI: Hi·ªÉn th·ªã ·∫£nh ho·∫∑c emoji ===
  const renderImage = (product) => {
      const url = getImageUrl(product.image_url);
      
      // N·∫øu l√† emoji (ng·∫Øn v√† kh√¥ng ph·∫£i link)
      if (url && url.length < 5 && !url.startsWith('http')) {
          return <div className="product-image emoji-image">{url}</div>;
      }
      // N·∫øu l√† link ·∫£nh th·∫≠t
      if (url) {
          return (
              <div 
                  className="product-image real-image" 
                  style={{backgroundImage: `url(${url})`}}
              ></div>
          );
      }
      // Fallback n·∫øu kh√¥ng c√≥ g√¨
      return <div className="product-image emoji-image">ü•§</div>;
  };

  return (
    <div className="container">
      <Head>
        <title>Tr√† S·ªØa & C√† Ph√™ Express - ƒê·∫∑t h√†ng</title>
      </Head>

      <header className="header">
        ‚òï Tr√† S·ªØa Express
      </header>

      <main>
        {menuData.map((category) => (
          <section key={category.id} className="category-section">
            
            <h2 className="category-title">{category.name}</h2>
            
            <div className="products-grid">
              {category.products.map((product) => (
                
                <div 
                  key={product.id} 
                  // Th√™m class 'disabled' n·∫øu h·∫øt h√†ng
                  className={`product-card ${product.is_out_of_stock ? 'out-of-stock' : ''}`}
                  // Ch·ªâ cho ph√©p click n·∫øu c√≤n h√†ng
                  onClick={() => !product.is_out_of_stock && setSelectedProduct(product)}
                >
                  
                  {/* === TH√äM OVERLAY H·∫æT H√ÄNG === */}
                  {product.is_out_of_stock && (
                    <div className="stock-overlay">
                      <span>T·∫°m h·∫øt h√†ng</span>
                    </div>
                  )}
                  
                  {/* === S·ª¨A ·ªû ƒê√ÇY: G·ªçi h√†m renderImage === */}
                  {renderImage(product)}
                  
                  <div className="product-info">
                    <h3 className="product-name">{product.name}</h3>
                    <p className="product-description">{product.description}</p>
                    
                    <div className="product-footer">
                      <span className="product-price">
                        {product.base_price.toLocaleString('vi-VN')}ƒë
                      </span>
                    </div>
                  </div>

                </div>
              ))}
            </div>

          </section>
        ))}
      </main>

      {/* Modal v√† CartDisplay */}
      {selectedProduct && (
        <ProductModal 
          product={selectedProduct}
          onClose={() => setSelectedProduct(null)}
        />
      )}
      <CartDisplay />
    </div>
  );
}

// --- PH·∫¶N 2: L·∫•y D·ªØ li·ªáu (Logic) ---
// (S·ª≠ d·ª•ng API_URL cho Server-side)
export async function getServerSideProps(context) {
  // D√πng API_URL (bi·∫øn server-side) m√† docker-compose cung c·∫•p
  const apiUrl = process.env.API_URL || process.env.NEXT_PUBLIC_API_URL; // D√πng API_URL, n·∫øu kh√¥ng c√≥ th√¨ d√πng NEXT_PUBLIC

  if (!apiUrl) {
    console.error("L·ªñI: Bi·∫øn m√¥i tr∆∞·ªùng API_URL ho·∫∑c NEXT_PUBLIC_API_URL ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh!");
    return { props: { menuData: [], error: "L·ªói c·∫•u h√¨nh h·ªá th·ªëng (API URL not set)." } };
  }

  try {
    const res = await fetch(`${apiUrl}/menu`);
    if (!res.ok) {
      throw new Error(`K·∫øt n·ªëi "B·ªô n√£o" th·∫•t b·∫°i! (Status: ${res.status}) - URL: ${apiUrl}/menu`);
    }
    const menuData = await res.json();
    return { props: { menuData: menuData, error: null } };
  } catch (err) {
    console.error("L·ªói khi g·ªçi API /menu:", err.message);
    return { props: { menuData: [], error: err.message } };
  }
}