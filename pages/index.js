// T·ªáp: fnb-smart-menu-frontend/pages/index.js (N√¢ng c·∫•p "H·∫øt h√†ng")

import Head from 'next/head';
import { useState } from 'react';
import ProductModal from '../components/ProductModal';
import CartDisplay from '../components/CartDisplay';

// --- PH·∫¶N 1: Giao di·ªán (HTML/JSX) ---
export default function HomePage({ menuData, error }) {
  
  const [selectedProduct, setSelectedProduct] = useState(null);

  if (error) { /* (Ph·∫ßn x·ª≠ l√Ω l·ªói gi·ªØ nguy√™n) */ }

  return (
    <div className="container">
      <Head><title>Tr√† S·ªØa & C√† Ph√™ Express - ƒê·∫∑t h√†ng</title></Head>
      <header className="header">‚òï Tr√† S·ªØa Express</header>
      
      <main>
        {menuData.map((category) => (
          <section key={category.id} className="category-section">
            <h2 className="category-title">{category.name}</h2>
            <div className="products-grid">
              {category.products.map((product) => (
                
                // === S·ª¨A L·ªñI LOGIC CLICK ===
                <div 
                  key={product.id} 
                  // Th√™m class 'disabled' n·∫øu h·∫øt h√†ng
                  className={`product-card ${product.is_out_of_stock ? 'out-of-stock' : ''}`}
                  // Ch·ªâ cho ph√©p click n·∫øu c√≤n h√†ng
                  onClick={() => !product.is_out_of_stock && setSelectedProduct(product)}
                >
                  
                  {/* === TH√äM OVERLAY H·∫æT H√ÄNG === */}
                  {product.is_out_of_stock && (
                    <div className="stock-overlay">
                      <span>T·∫°m h·∫øt h√†ng</span>
                    </div>
                  )}
                  
                  <div className="product-image">{product.image_url || 'ü•§'}</div>
                  <div className="product-info">
                    <h3 className="product-name">{product.name}</h3>
                    <p className="product-description">{product.description}</p>
                    <div className="product-footer">
                      <span className="product-price">
                        {product.base_price.toLocaleString('vi-VN')}ƒë
                      </span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </section>
        ))}
      </main>
      
      {/* (Modal v√† CartDisplay gi·ªØ nguy√™n) */}
      {selectedProduct && (
        <ProductModal 
          product={selectedProduct}
          onClose={() => setSelectedProduct(null)}
        />
      )}
      <CartDisplay />
    </div>
  );
}


// --- PH·∫¶N 2: L·∫•y D·ªØ li·ªáu (Logic) ---
export async function getServerSideProps(context) {
  // D√πng API_URL (bi·∫øn server-side) m√† docker-compose cung c·∫•p
  const apiUrl = process.env.API_URL || process.env.NEXT_PUBLIC_API_URL; // D√πng API_URL, n·∫øu kh√¥ng c√≥ th√¨ d√πng NEXT_PUBLIC

  if (!apiUrl) {
    console.error("L·ªñI: Bi·∫øn m√¥i tr∆∞·ªùng API_URL ho·∫∑c NEXT_PUBLIC_API_URL ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh!");
    return { props: { menuData: [], error: "L·ªói c·∫•u h√¨nh h·ªá th·ªëng (API URL not set)." } };
  }

  try {
    const res = await fetch(`${apiUrl}/menu`);
    if (!res.ok) {
      throw new Error(`K·∫øt n·ªëi "B·ªô n√£o" th·∫•t b·∫°i! (Status: ${res.status}) - URL: ${apiUrl}/menu`);
    }
    const menuData = await res.json();
    return { props: { menuData: menuData, error: null } };
  } catch (err) {
    console.error("L·ªói khi g·ªçi API /menu:", err.message);
    return { props: { menuData: [], error: err.message } };
  }
}