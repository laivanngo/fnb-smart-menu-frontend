// T·ªáp: components/CartDisplay.js (B·∫£n HO√ÄN CH·ªàNH)
// M·ª•c ƒë√≠ch: Hi·ªÉn th·ªã gi·ªè h√†ng (l∆° l·ª≠ng)
// ƒê√£ bao g·ªìm:
// 1. S·ª≠a l·ªói Hydration (v·ªõi hasMounted)
// 2. N√∫t "Thanh to√°n" (v·ªõi useRouter)

import React, { useState, useEffect } from 'react';
import { useCart } from '../context/CartContext'; // L·∫•y "c√°i m√≥c"
import { useRouter } from 'next/router'; // 1. IMPORT "B·ªô ƒëi·ªÅu h∆∞·ªõng"

export default function CartDisplay() {
  const [isOpen, setIsOpen] = useState(false); // Tr·∫°ng th√°i ƒê√≥ng/M·ªü
  const { cartItems, itemCount, totalPrice, removeFromCart, updateQuantity } = useCart(); // L·∫•y m·ªçi th·ª© t·ª´ "Chi·∫øc t√∫i"
  const router = useRouter(); // 2. KH·ªûI T·∫†O "B·ªô ƒëi·ªÅu h∆∞·ªõng"

  // === PH·∫¶N S·ª¨A L·ªñI HYDRATION ===
  // 3. T·∫°o m·ªôt "b·ªô nh·ªõ" (state) ƒë·ªÉ ki·ªÉm tra
  const [hasMounted, setHasMounted] = useState(false);

  // 4. H√†m n√†y s·∫Ω CH·ªà CH·∫†Y 1 L·∫¶N ·ªü "Client" (tr√¨nh duy·ªát)
  //    SAU KHI qu√° tr√¨nh "kh·ªõp" (hydration) ban ƒë·∫ßu ho√†n t·∫•t
  useEffect(() => {
    setHasMounted(true); // ƒê√°nh d·∫•u: "T√¥i ƒë√£ ·ªü tr√¨nh duy·ªát"
  }, []); // M·∫£ng r·ªóng = ch·∫°y 1 l·∫ßn duy nh·∫•t

  // 5. "C·ªîNG AN NINH"
  // N·∫øu "ch∆∞a ·ªü tr√¨nh duy·ªát" (hasMounted l√† false),
  // c·∫£ server v√† client (l·∫ßn render ƒë·∫ßu) s·∫Ω ƒë·ªÅu kh√¥ng hi·ªÉn th·ªã g√¨ c·∫£.
  // -> Ch√∫ng kh·ªõp nhau (ƒë·ªÅu l√† 'null') -> H·∫øt l·ªói!
  if (!hasMounted) {
    return null;
  }
  // === K·∫æT TH√öC S·ª¨A L·ªñI ===


  // 6. H√ÄM X·ª¨ L√ù N√öT "THANH TO√ÅN"
  const handleCheckout = () => {
    setIsOpen(false); // ƒê√≥ng gi·ªè h√†ng
    router.push('/checkout'); // Chuy·ªÉn ƒë·∫øn trang checkout
  };

  // N·∫øu gi·ªè h√†ng ƒëang m·ªü, hi·ªÉn th·ªã chi ti·∫øt
  if (isOpen) {
    return (
      <div className="cart-modal-backdrop" onClick={() => setIsOpen(false)}>
        <div className="cart-modal-content" onClick={(e) => e.stopPropagation()}>
          <div className="cart-header">
            <h3>Gi·ªè h√†ng ({itemCount})</h3>
            <button onClick={() => setIsOpen(false)} className="cart-close">√ó</button>
          </div>
          
          <div className="cart-items-list">
            {cartItems.length === 0 ? (
              <p style={{textAlign: 'center', padding: '20px'}}>Gi·ªè h√†ng tr·ªëng</p>
            ) : (
              cartItems.map(item => (
                <div key={item.cartId} className="cart-item">
                  <div className="cart-item-info">
                    <strong>{item._display.name}</strong>
                    <small>{item._display.optionsText}</small>
                    {item.note && <small><em>Ghi ch√∫: {item.note}</em></small>}
                  </div>
                  <div className="cart-item-controls">
                    <div className="quantity-selector-cart">
                      <button onClick={() => updateQuantity(item.cartId, item.quantity - 1)}>-</button>
                      <span>{item.quantity}</span>
                      <button onClick={() => updateQuantity(item.cartId, item.quantity + 1)}>+</button>
                    </div>
                    <span>
                      {(item._display.itemPrice * item.quantity).toLocaleString('vi-VN')}ƒë
                    </span>
                    <button onClick={() => removeFromCart(item.cartId)} className="cart-remove">X√≥a</button>
                  </div>
                </div>
              ))
            )}
          </div>
          
          <div className="cart-footer">
            <strong>T·ªïng c·ªông: {totalPrice.toLocaleString('vi-VN')}ƒë</strong>
            {/* N√∫t thanh to√°n g·ªçi h√†m handleCheckout */}
            <button className="checkout-btn" onClick={handleCheckout}>
              Thanh to√°n
            </button>
          </div>
        </div>
      </div>
    );
  }

  // N·∫øu gi·ªè h√†ng ƒëang ƒë√≥ng, ch·ªâ hi·ªÉn th·ªã "n√∫t n·ªïi"
  // (ƒêo·∫°n code n√†y c≈©ng ch·ªâ ch·∫°y khi hasMounted = true)
  if (itemCount === 0) return null; // ·∫®n lu√¥n n·∫øu gi·ªè tr·ªëng
  
  return (
    <div className="cart-fab" onClick={() => setIsOpen(true)}>
      üõí
      <span className="cart-fab-count">{itemCount}</span>
      <span className="cart-fab-total">{totalPrice.toLocaleString('vi-VN')}ƒë</span>
    </div>
  );
}